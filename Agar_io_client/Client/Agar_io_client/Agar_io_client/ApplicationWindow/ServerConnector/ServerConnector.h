#ifndef SERVERCONNECTOR_H
#define SERVERCONNECTOR_H
#include <QDataStream>
#include <QWebSocket>
#include <QPoint>
#include <QFile>
#include <QSslKey>

//0000 0001 0 1 0  "текстовое сообщение_1"
//0000 0000 0 11111111 11010101 01010011 "данные картинки_2"
//1000 0000 0 11111111 11011101 01010011 "данные картинки_3"



//"д_1" + "д_2" + "д_3" = "QByteArray"


//это последний фрагмент
//расширений нет
//111111110101011010011
/*
 *  0                   1                   2                   3
 *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 * +-+-+-+-+-------+-+-------------+-------------------------------+
 * |F|R|R|R| опкод |М| Длина тела  |    Расширенная длина тела     |
 * |I|S|S|S|(4бита)|А|   (7бит)    |            (1 байт)           |
 * |N|V|V|V|       |С|             |(если длина тела==126 или 127) |
 * | |1|2|3|       |К|             |                               |
 * | | | | |       |А|             |                               |
 * +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
 * |  Продолжение расширенной длины тела, если длина тела = 127    |
 * + - - - - - - - - - - - - - - - +-------------------------------+
 * |                               |  Ключ маски, если МАСКА = 1   | 0-2^32
 * +-------------------------------+-------------------------------+
 * | Ключ маски (продолжение)      |       Данные фрейма ("тело")  |
 * +-------------------------------- - - - - - - - - - - - - - - - +
 * :                     Данные продолжаются ...                   :
 * + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 * |                     Данные продолжаются ...                   |
 * +---------------------------------------------------------------+
 *
 *
 */
/*

 * FIN            -
 *      • 0 – будут ещё пакеты.
 *      • 1 – это был последний пакет.
 *
 *
 * RSV1           -
 *      •	расширения протокола записывают сюда свои биты
 * RSV2           -
 *      •	расширения протокола записывают сюда свои биты
 * RSV3           -
 *      •	расширения протокола записывают сюда свои биты
 *
 *
 * Опкод          -
 *      •	0x1 - текстовый фрейм.
 *      •	0x2 - двоичный фрейм.
 *      •	0x3-7 - зарезервированы для будущих фреймов с данными.
 *      •	0x8 - закрытие соединения этим фреймом.
 *      •	0x9 - PING.
 *      •	0xA - PONG.
 *      •	0xB-F зарезервированы для будущих управляющих фреймов.
 *      •	0x0 - фрейм-продолжение для фрагментированного сообщения. Он интерпретируется, исходя из ближайшего предыдущего ненулевого типа.
 *
 *
 * Наличие маски  -
 *      •	0 – маски нет
 *      •	1 – маска есть
 *
 *
 * Длина тела     -
 *      •	неограничена
 *
 *
 * Маска          -
 *      •	0-2^32
 *
 *
 * Данные         -
 *      •   "Полезная нагрузка".
 *
 *
 *
 *
 */
/*
 * Коды закрытия
 * Коды закрытия вебсокета event.code, чтобы не путать их с HTTP-кодами, состоят из 4 цифр:
 * 1000 Нормальное закрытие.
 * 1001 Удалённая сторона «исчезла». Например, процесс сервера убит или браузер перешёл на другую страницу.
 * 1002 Удалённая сторона завершила соединение в связи с ошибкой протокола.
 * 1003 Удалённая сторона завершила соединение в связи с тем, что она получила данные, которые не может принять.
 * Например, сторона, которая понимает только текстовые данные, может закрыть соединение с таким кодом, если приняла бинарное сообщение.
 *
 */

class ServerConnector : public QObject
{
    Q_OBJECT
private:
    enum ServerSignals
    {
        SetID = 0,
        UpdateArena,
        LeaveArena
    };
    enum UserActions
    {
        UserWandPlay = 0,
        UserMoveToPoint,
        UserWantExit
    };
    QWebSocket* m_webSocket;
    quint32 m_ID;
public:
    explicit ServerConnector(const QUrl&, QObject *parent = nullptr);

public slots:
    void slotConnection();
    void slotReadyRead(const QByteArray&);

    void slotSendPlayerWantPlay();
    void slotSendPlayerGoToThisPoint(QPoint);
    void slotSendPlayerWantExit();

protected slots:
    void slotSocketError(QAbstractSocket::SocketError);
    void slotSslErrors(const QList<QSslError> &errors);
    void slotSocketDisconnected();
    void slotSocketStateChanged(QAbstractSocket::SocketState);
signals:
    void signalUpdateArena(quint32, const QByteArray&);
    void signalExitFromArena();
};

#endif // SERVERCONNECTOR_H
